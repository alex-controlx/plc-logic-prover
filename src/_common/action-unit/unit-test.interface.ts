import {LpUtils} from "../utils";
import {
    IGenericActionUnit,
    ActionUnitParams,
    ActionUnitType, DEFAULT_UNNAMED_AU,
    ModTagValue, ModTagValueTimed
} from "./action-unit.interface";

interface IUnitTestAUParams extends ActionUnitParams {
    /**
     * This is inputs of the unit to change. When these tag values changed
     * it expected to have changes in _expectedChanges_
     */
    tagsToModify: ModTagValue[],
    /**
     * These are tags which are expected to change. For instance, an alarm on value changed in _tagsToModify_
     */
    expectedChanges: ModTagValueTimed[],
    /**
     * Monitor unexpected changes. If empty no monitoring of other tags is necessary.
     */
    noChangeTagIds: string[],
    /**
     * This tags will be toggled: set to fromValue and then to toValue.
     * It used to reset Alarm generated by the Unit Test.
     */
    tagsToToggle: ModTagValueTimed[],
}

export interface IUnitTestAU extends IGenericActionUnit {
    readonly type: ActionUnitType.UnitTest;
    params: IUnitTestAUParams
}

export class UnitTestAU implements IUnitTestAU {
    desc: string = "";
    enabled: boolean = true;
    readonly id: string = LpUtils.generateId();
    // do not modify, it is a test property for new class
    modifiedOn: number = 0;
    readonly type: ActionUnitType.UnitTest = ActionUnitType.UnitTest;
    name: string;
    params: IUnitTestAUParams;
    parentId: string;

    constructor(name: string, parentId: string) {
        this.name = name || DEFAULT_UNNAMED_AU;
        this.parentId = parentId;
        this.params = {
            sleepBefore: 0,
            sleepAfter: 0,
            tagsToModify: [new ModTagValue()],
            expectedChanges: [new ModTagValueTimed()],
            noChangeTagIds: [],
            tagsToToggle: [],
        }
    }
}
